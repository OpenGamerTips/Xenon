using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading;
using EyeStepPackage;
using Newtonsoft.Json;

namespace XenonDumper
{
    class Program
    {
        static WebClient Client = new WebClient();
        static Dictionary<string, Dictionary<string, object>> AddyList = new Dictionary<string, Dictionary<string, object>>();
        static List<string> MacroList = new List<string>();
        static string GetHeaderFile()
        {
            string Header = "// File: RLua.hpp\n// Generated by Xenon Dumper\n#include \"Retcheck.h\"\n#define ASLR(Address) (Address - 0x400000 + (DWORD)GetModuleHandleA(0))\n";
            //string Types = "";
            string Addys = "";
            string AddyDefine = "";
            string AddyCast = "";
            string Macros = "";

            foreach (KeyValuePair<string, Dictionary<string, object>> Entry in AddyList)
            {
                string Name = Entry.Key;
                int Prologue = (int)Entry.Value["Address"];
                string Convention = (string)Entry.Value["Convention"];
                string Ret = (string)Entry.Value["Return"];
                string Args = (string)Entry.Value["Arguments"];

                Addys += $"const DWORD {Name}_address = ASLR(0x{util.raslr(Prologue).ToString("X")});\n";
                if (Args != "")
                {
                    AddyDefine += $"typedef {Ret}({Convention}* {Name}_cast)({Args});\n";
                }
                else
                {
                    AddyDefine += $"typedef {Ret}({Convention}* {Name}_cast)(...);\n"; // use variadic
                }
                AddyCast += $"{Name}_cast {Name} = reinterpret_cast<{Name}_cast>(unprotect({Name}_address));\n";
            }

            foreach (string Macro in MacroList)
            {
                Macros += Macro;
            }

            return $"{Header}\n// Addresses\n{Addys}\n// Function Definitions\n{AddyDefine}\n// Casts\n{AddyCast}\n// Macros\n{Macros}\n";
        }

        static string GetIDANameScript(bool IsNewerIDA, bool IsAslrRebased = true)
        {
            string RenameFunc = "MakeName";
            if (IsNewerIDA)
            {
                RenameFunc = "set_name";
            }

            string Script = "";
            foreach (KeyValuePair<string, Dictionary<string, object>> Entry in AddyList)
            {
                string Name = Entry.Key;
                int Prologue = (int)Entry.Value["Address"];
                if (IsAslrRebased)
                {
                    Prologue = util.raslr(Prologue);
                }

                Script += $"{RenameFunc}({Prologue}, \"{Name}\"); ";
            }

            return Script;
        }

        static string GetDumpFormat()
        {
            string Padding = "                         ";
            string Dump = "";
            foreach (KeyValuePair<string, Dictionary<string, object>> Entry in AddyList)
            {
                string Name = Entry.Key;
                int Prologue = (int)Entry.Value["Address"];

                Dump += $"{Name}: {Padding.Substring(Name.Length)} 0x{util.raslr(Prologue).ToString("X8")}  {util.getAnalysis(Prologue)}\n";
            }

            return Dump;
        }

        static string GetJSON(string Version)
        {
            List<string> JSON = new List<string>();
            foreach (KeyValuePair<string, Dictionary<string, object>> Entry in AddyList)
            {
                string Name = Entry.Key;
                int Prologue = (int)Entry.Value["Address"];
                string Convention = (string)Entry.Value["Convention"];

                JSON.Add(JsonConvert.SerializeObject(new Dictionary<string, object> {
                    { "Name", Name },
                    { "Address", util.raslr(Prologue) },
                    { "Convention", Convention }
                }));
            }

            string JsonStr = $"{{\"Version\":\"{Version}\",\"Addresses\":[";
            foreach (string Dict in JSON)
            {
                JsonStr += Dict;
                JsonStr += ",";
            }
            return JsonStr.Substring(0, JsonStr.Length - 1) + "]}";
        }

        static void Add(int Type, string Name, object Data, string Ret = "", string Args = "")
        {
            if (Ret == "")
            {
                Ret = "void";
            }

            if (Type == 1) // address
            {
                int Prologue = util.getPrologue((int)Data);
                string Convention = util.convs[util.getConvention(Prologue)];

                Dictionary<string, object> Addy = new Dictionary<string, object>();
                Addy.Add("Address", Prologue);
                Addy.Add("Convention", Convention);
                Addy.Add("Return", Ret);
                Addy.Add("Arguments", Args);
                AddyList.Add(Name, Addy);
            }
            else if (Type == 2) // macro function
            {
                MacroList.Add($"{Ret} {Name}({Args})\n{{\n{(string)Data}\n}}\n\n");
            }
            else if (Type == 3) // lua type (for later)
            {
                //Types += $"const int {Name} = {(string)Data}";
            }
        }

        static List<T> ShiftRight<T>(List<T> List, int By) // i like using lists with normal numbers
        {
            List<T> Range = List.GetRange(List.Count - By, By);
            Range.AddRange(List.GetRange(0, List.Count - By));
            return Range;
        }

        static void StatusPrint(string Data, int Type = 1)
        {
            if (Type == 0)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.Write("[+] ");
                Console.ForegroundColor = ConsoleColor.White;
            }
            else if (Type == 1)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.Write("[=] ");
                Console.ForegroundColor = ConsoleColor.White;
            }
            else if (Type == 2)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write("[-] ");
                Console.ForegroundColor = ConsoleColor.White;
            }

            Console.Write(Data + "\n");
        }

        static bool InterpretYN(string YN)
        {
            switch (YN.ToLower())
            {
                case "y":
                    return true;
                case "n":
                    return false;
                case "yes":
                    return true;
                case "no":
                    return false;
                default:
                    Console.Write("N\n");
                    return false;
            }
        }

        static string GetLatestClientVersion() // not sure this will work with mac beacuse 'WindowsPlayer' but ok
        {
            List<string> Releases = new List<string>();
            byte[] Buffer = Client.DownloadData("https://setup.rbxcdn.com/DeployHistory.txt");

            MemoryStream Stream = new MemoryStream(Buffer);
            StreamReader Reader = new StreamReader(Stream);
            string Line = Reader.ReadLine();
            while (Line != null)
            {
                if (Line.Contains("New WindowsPlayer ")) // client releases
                {
                    Releases.Add(Line.Substring(18, 24)); // version hash is always the same length
                }

                Line = Reader.ReadLine();
            }

            return Releases.Last(); // latest release
        }

        static void Main(string[] args)
        {
            Console.Title = "Xenon Dumper";

            StatusPrint("Opening Roblox...");
            Process[] Instances = Process.GetProcessesByName("RobloxPlayerBeta");
            if (Instances.Length < 1)
            {
                StatusPrint("Please open roblox and restart the program.", 2);
                Console.ReadLine();
                Environment.Exit(-1);
            }

            EyeStep.open("RobloxPlayerBeta.exe");
            Process Instance = Instances.Last();
            StatusPrint("Opened!", 0);
            StatusPrint("Checking Roblox Version..."); // just in case
            string LatestVersionHash = GetLatestClientVersion();
            string CurrentVersionHash = Path.GetDirectoryName(Instance.MainModule.FileName).Split('\\').Last();


            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.Write(LatestVersionHash);
            Console.Write(" => ");
            Console.Write(CurrentVersionHash);
            Console.Write("...");
            if (LatestVersionHash == CurrentVersionHash)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.Write("Match!\n");
                StatusPrint("Latest version. Continuing...", 0);
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write("Mismatch.\n");
                Console.ForegroundColor = ConsoleColor.White;

                Console.WriteLine("You are not running the latest version of Roblox. Do you want to continue? (Y/N)");
                bool Cont = InterpretYN(Console.ReadLine());
                if (!Cont)
                {
                    Environment.Exit(0);
                }
                else
                {
                    StatusPrint("Bypassed version. Continuing...", 2);
                }
            }
            
            StatusPrint("Grabbing starting addresses...");
            int Getfield = 0;
            int Index2Adr = 0;
            int Retcheck = 0;
            try
            {
                StatusPrint("Setfield..."); // https://h3x0r.likes-throwing.rocks/31sYhd.png
                List<int> X0 = scanner.scan_xrefs("isdst");
                Add(1, "rlua_setfield", util.nextCall(X0[0]));

                StatusPrint("Getfield...");
                Getfield = util.getPrologue(util.nextCall(X0[1]));
                Add(1, "rlua_getfield", Getfield);

                StatusPrint("Index2Adr...");
                Index2Adr = util.nextCall(Getfield);
                Add(1, "rindex2adr", Index2Adr);

                StatusPrint("Retcheck...");
                Retcheck = util.prevCall(util.getEpilogue(Getfield));
                Add(1, "retcheck", Retcheck);
            }
            catch
            {
                StatusPrint("An error occured. The dumper may be broken. The dumper shouldn't be patched erroring at this area. Please contact a developer.", 3);
                Console.ReadLine();
                Environment.Exit(-1);
            }

            try
            {
                StatusPrint("Scanning Index2Adr XREFs..."); // thanks for teaching me that method DeepPain ily no homo
                List<int> Scan1 = ShiftRight(scanner.scan_xrefs(Index2Adr), 1);
                Add(1, "rlua_rawvalue", Scan1[1]); // fixed numbers
                Add(1, "rlua_getfenv", Scan1[2]);
                Add(1, "rlua_getmetatable", Scan1[4], "int");
                Add(1, "rlua_gettable", Scan1[5]);
                Add(1, "rlua_getupvalue", Scan1[6], "const char*");
                Add(1, "rlua_insert", Scan1[7]);
                Add(1, "rlua_iscfunction", Scan1[8], "int");
                Add(1, "rlua_isnumber", Scan1[10], "int");
                Add(1, "rlua_isstring", Scan1[11], "int");
                Add(1, "rlua_lessthan", Scan1[12], "int");
                Add(1, "rlua_next", Scan1[14], "int");
                Add(1, "rlua_objlen", Scan1[15], "size_t");
                Add(1, "rlua_pcall", Scan1[16], "int");
                Add(1, "rlua_pushvalue", Scan1[17]);
                Add(1, "rlua_rawget", Scan1[20]);
                Add(1, "rlua_rawgeti", Scan1[22]);
                Add(1, "rlua_remove", Scan1[25]);
                Add(1, "rlua_replace", Scan1[26]);
                Add(1, "rlua_setfenv", Scan1[27], "int");
                Add(1, "rlua_setmetatable", Scan1[29], "int");
                Add(1, "rlua_setreadonly", Scan1[30]);
                Add(1, "rlua_setsefeenv", Scan1[31]);
                Add(1, "rlua_settable", Scan1[32]);
                Add(1, "rlua_setupvalue", Scan1[33]);
                Add(1, "rlua_toboolean", Scan1[34], "int");
                Add(1, "rlua_tointeger", Scan1[35], "int");
                Add(1, "rlua_tolstring", Scan1[36], "const char*");
                Add(1, "rlua_tonumber", Scan1[38], "double");
                Add(1, "rlua_topointer", Scan1[39], "const void*");
                Add(1, "rlua_tostring", Scan1[41], "const char*");
                Add(1, "rlua_tothread", Scan1[43], "int");
                Add(1, "rlua_tounsigned", Scan1[44], "int");
                Add(1, "rlua_tosuserdata", Scan1[45]);
                int RLType = Scan1[48];
                Add(1, "rlua_type", RLType, "int");

                StatusPrint("Scanning Retcheck XREFs...");
                List<int> Scan2 = ShiftRight(scanner.scan_xrefs(Retcheck), 1);
                Add(1, "rf_call", Scan2[1]);
                Add(1, "rlua_call", Scan2[2]);
                Add(1, "rlua_checkstack", Scan2[3], "int");
                Add(1, "rlua_concat", Scan2[4]);
                Add(1, "rlua_createtable", Scan2[5]);
                Add(1, "rlua_gc", Scan2[6], "int");
                int RLNT = Scan2[14];
                Add(1, "rlua_newthread", RLNT, "int");
                Add(1, "rlua_newuserdata", Scan2[15]);
                int RLPushBool = Scan2[19];
                Add(1, "rlua_pushboolean", RLPushBool);
                Add(1, "rlua_pushcclosure", Scan2[20]);
                Add(1, "rlua_pushfstring", Scan2[21], "const char*");
                Add(1, "rlua_pushinteger", Scan2[22]);
                int RLPLUD = Scan2[23];
                Add(1, "rlua_pushlightuserdata", RLPLUD);
                Add(1, "rlua_pushlstring", Scan2[24]);
                Add(1, "rlua_pushnil", Scan2[25]);
                Add(1, "rlua_pushnumber", Scan2[26]);
                int RLPushString = Scan2[27];
                Add(1, "rlua_pushstring", RLPushString);
                Add(1, "rlua_pushthread", Scan2[29], "int");
                Add(1, "rlua_pushvfstring", Scan2[32], "const char*");
                int RLSettop = Scan2[47];
                Add(1, "rlua_settop", RLSettop);
                Add(1, "rlua_xmove", Scan2[51]);
                Add(1, "rlua_resume", Scan2[52], "int");
                Add(1, "resume_error", Scan2[55]);
                Add(1, "rluaU_callhook", Scan2[56]);
                Add(1, "rlua_getargument", Scan2[57]);
                Add(1, "rlua_getinfo", Scan2[58], "int");
                Add(1, "rlua_getlocal", Scan2[59], "const char*");
                Add(1, "rlua_getstack", Scan2[60]);

                StatusPrint("Grabbing manual addresses...");
                StatusPrint("Sandboxthread...");
                Add(1, "sandboxthread", scanner.scan_xrefs("__index")[2]);

                StatusPrint("Print...");
                int Print = scanner.scan_xrefs("Video recording started").Last();
                Add(1, "rprint", Print); // why

                StatusPrint("Deserialize...");
                int Deserializer = scanner.scan_xrefs(": bytecode version mismatch").Last();
                Add(1, "rluaU_deserialize", Deserializer);

                StatusPrint("Creating emulation macros...");
                Add(2, "rlua_getglobal", @"    rlua_getfield(rL, -10002, Name);", "void", "int rL, const char* Name"); // std::string.c_str()
                Add(2, "rlua_setglobal", @"    rlua_setfield(rL, -10002, Name);", "void", "int rL, const char* Name"); // std::string.c_str()
                Add(2, "rlua_pop", @"   rlua_settop(rL, -(Number) - 1);", "void", "int rL, int Number");

                //int Spawn = scanner.scan_xrefs("Spawn function requires 1 argument.").Last(); // roblox upped their security, time for a macro!
                Add(2, "spawn", @"  rlua_getglobal(rL, ""spawn"");
    rlua_pushvalue(rL, -2);
    rlua_call(rL, 1, 0);", "void", "int rL");
            }
            catch (IndexOutOfRangeException)
            {
                StatusPrint("An error occured. The dumper may be broken. This is normally a problem where a function gets removed from Roblox and requires the dumper to be shifted. Please contact a developer.", 3);
                Console.ReadLine();
                Environment.Exit(-1);
            } 

            // For later...right now i cant get the offsets automatically to simulate getfield for the rLhook
            /*
            string EncTypes = "";
            Task.Factory.StartNew(() => { // C++ to C# communication line.
                NamedPipeServerStream Pipe = new NamedPipeServerStream("xenon_dmp_server");
                Pipe.WaitForConnection();
                StreamWriter Writer = new StreamWriter(Pipe);

                // Getfield, Type, Settop, Pushbool, PushString, Pushlightuserdata, Newthread
                Writer.WriteLine(util.getPrologue(Getfield));
                Writer.WriteLine(util.convs[util.getConvention(Getfield)]);

                Writer.WriteLine(util.getPrologue(RLType));
                Writer.WriteLine(util.convs[util.getConvention(RLType)]);

                Writer.WriteLine(util.getPrologue(RLSettop));
                Writer.WriteLine(util.convs[util.getConvention(RLSettop)]);

                Writer.WriteLine(util.getPrologue(RLPushBool));
                Writer.WriteLine(util.convs[util.getConvention(RLPushBool)]);

                Writer.WriteLine(util.getPrologue(RLPushString));
                Writer.WriteLine(util.convs[util.getConvention(RLPushString)]);

                Writer.WriteLine(util.getPrologue(RLPLUD));
                Writer.WriteLine(util.convs[util.getConvention(RLPLUD)]);

                Writer.WriteLine(util.getPrologue(RLNT));
                Writer.WriteLine(util.convs[util.getConvention(RLNT)]);

                Pipe.WaitForConnection();
                StreamReader Reader = new StreamReader(Pipe);
                EncTypes = Reader.ReadLine();
                Reader.Dispose();

                Pipe.Close();
            });

            Injector.InjectDLL("RobloxPlayerBeta.exe", Path.GetFullPath("LuaTypeDumper.dll"));
            while (EncTypes == "") // wait for response
            {
                Thread.Sleep(1000);
            }*/

            StatusPrint("Done!\n", 0);
            Console.WriteLine("What do you want to do with the data?");
            Console.WriteLine("1: Get RLua Header File");
            Console.WriteLine("2: Get IDA Rename Script");
            Console.WriteLine("3: Get Simple Dump Format");
            Console.WriteLine("4: Get JSON Format");
            string Option = Console.ReadLine();
            
            switch (Option)
            {
                case "1":
                    {
                        string HeaderFile = GetHeaderFile();
                        Console.WriteLine("Output to file? (Y/N)");
                        bool OutFile = InterpretYN(Console.ReadLine());
                        if (!OutFile)
                        {
                            Console.WriteLine(HeaderFile);
                        }
                        else
                        {
                            File.WriteAllText("RLua.hpp", HeaderFile);
                            Console.WriteLine("File written as RLua.hpp.");
                        }
                        break;
                    }
                case "2":
                    {
                        Console.WriteLine("Is your IDA newer than 7.3? (Y/N)");
                        bool IsNewer = InterpretYN(Console.ReadLine());
                        Console.WriteLine("Is your IDA Database rebased to 0x400000? (Y/N)");
                        bool IsRebased = InterpretYN(Console.ReadLine());

                        string Script = GetIDANameScript(IsNewer, IsRebased);
                        Console.WriteLine("Output to file? (Y/N)");
                        bool OutFile = InterpretYN(Console.ReadLine());
                        if (!OutFile)
                        {
                            Console.WriteLine(Script);
                        }
                        else
                        {
                            File.WriteAllText("IDArename.idc", Script);
                            Console.WriteLine("File written as IDArename.idc.");
                        }
                        Console.WriteLine("To use, copy and paste the script in the bottom bar and execute it (IDAPython versions need to change from IDAPython to IDC https://streamable.com/uk68c5).");

                        break;
                    }
                case "3":
                    {
                        StatusPrint("Analyzing functions...");
                        string Dump = GetDumpFormat();
                        StatusPrint("Done!", 0);
                        Console.WriteLine("Output to file? (Y/N)");
                        bool OutFile = InterpretYN(Console.ReadLine());
                        if (!OutFile)
                        {
                            Console.WriteLine(Dump);
                        }
                        else
                        {
                            File.WriteAllText("dump.txt", Dump);
                            Console.WriteLine("File written as dump.txt.");
                        }
                        break;
                    }
                case "4":
                    {
                        string Json = GetJSON(CurrentVersionHash);
                        Console.WriteLine("Output to file? (Y/N)");
                        bool OutFile = InterpretYN(Console.ReadLine());
                        if (!OutFile)
                        {
                            Console.WriteLine(Json);
                        }
                        else
                        {
                            File.WriteAllText("dump.json", Json);
                            Console.WriteLine("File written as dump.json.");
                        }
                        break;
                    }
                default:
                    {

                        break;
                    }
            }

            Console.WriteLine("\nPress enter to leave.");
            Console.ReadLine();
        }
    }
}